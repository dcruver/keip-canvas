[
  {
    "namespace": "file",
    "name": "file-to-string-transformer",
    "description": "Creates a 'org.springframework.integration.file.transformer.FileToStringTransformer' that converts a File payload to a String.",
    "connectionType": "passthru"
  },
  {
    "namespace": "file",
    "name": "outbound-channel-adapter",
    "description": "Configures a Consumer Endpoint for the 'org.springframework.integration.file.FileWritingMessageHandler' with 'expectReply = false' that writes Message payloads to a File.",
    "connectionType": "sink"
  },
  {
    "namespace": "file",
    "name": "file-to-bytes-transformer",
    "description": "Creates a 'org.springframework.integration.file.transformer.FileToByteArrayTransformer' that converts a File payload to an array of bytes.",
    "connectionType": "passthru"
  },
  {
    "namespace": "file",
    "name": "splitter",
    "description": "Creates a 'org.springframework.integration.file.splitter.FileSplitter' that splits text-based files into lines.",
    "connectionType": "tee"
  },
  {
    "namespace": "file",
    "name": "tail-inbound-channel-adapter",
    "description": "Configures a Message Producing Endpoint for the 'org.springframework.integration.file.tail.FileTailingMessageProducerSupport that 'tails' a file on the filesystem.",
    "connectionType": "source"
  },
  {
    "namespace": "file",
    "name": "inbound-channel-adapter",
    "description": "Configures a 'SourcePollingChannelAdapter' Endpoint for the 'org.springframework.integration.file.FileReadingMessageSource' that polls a directory and sends Messages whose payloads are instances of java.io.File.",
    "connectionType": "source"
  },
  {
    "namespace": "file",
    "name": "outbound-gateway",
    "description": "Configures a Consumer Endpoint for the 'org.springframework.integration.file.FileWritingMessageHandler' that writes request Message payloads to a File and then generates a reply Message containing the newly written File as its payload.",
    "connectionType": "request_reply"
  },
  {
    "namespace": "ftp",
    "name": "inbound-channel-adapter",
    "description": "Configures a 'SourcePollingChannelAdapter' Endpoint for the 'org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizingMessageSource' that synchronizes a local directory with the contents of a remote FTP endpoint.",
    "connectionType": "source"
  },
  {
    "namespace": "ftp",
    "name": "outbound-gateway",
    "description": "Configures a Consumer Endpoint for the 'org.springframework.integration.ftp.gateway.FtpOutboundGateway' used to issue FTP commands.",
    "connectionType": "request_reply"
  },
  {
    "namespace": "ftp",
    "name": "outbound-channel-adapter",
    "description": "Configures a Consumer Endpoint for the 'org.springframework.integration.file.remote.handler.FileTransferringMessageHandler' for the 'FtpRemoteFileTemplate' that writes files to a remote FTP endpoint.",
    "connectionType": "sink"
  },
  {
    "namespace": "ftp",
    "name": "inbound-streaming-channel-adapter",
    "description": "Configures a 'SourcePollingChannelAdapter' Endpoint for the 'org.springframework.integration.ftp.inbound.FtpInboundStreamingMessageSource'.",
    "connectionType": "source"
  },
  {
    "namespace": "groovy",
    "name": "control-bus",
    "description": "Control bus ('org.springframework.integration.groovy.config.GroovyControlBusFactoryBean') that accepts messages in the form of Groovy scripts. The scripts should be provided as String payload in incoming messages. The variable bindings will include any @ManagedResource, Lifecycle, or CustomizableThreadCreator instances from within the ApplicationContext.",
    "connectionType": "passthru"
  },
  {
    "namespace": "groovy",
    "name": "script",
    "description": "Configures an inner bean ('org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessor') that will generate a Groovy Script.",
    "connectionType": "passthru"
  },
  {
    "namespace": "http",
    "name": "outbound-channel-adapter",
    "description": "Configures a Consumer Endpoint for the 'org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler' with 'expectReply = false' that sends HTTP requests based on incoming messages.",
    "connectionType": "sink"
  },
  {
    "namespace": "http",
    "name": "inbound-gateway",
    "description": "Configures a Messaging Gateway Endpoint for the 'org.springframework.integration.http.inbound.HttpRequestHandlingEndpointSupport' that receives HTTP requests and produces responses.",
    "connectionType": "request_reply"
  },
  {
    "namespace": "http",
    "name": "graph-controller",
    "description": "Configures a 'org.springframework.integration.http.management.IntegrationGraphController' bean to expose a REST API for the 'org.springframework.integration.support.management.graph.IntegrationGraphServer' bean. Note: Spring Web MVC must be present in the application to enable and register this component.",
    "connectionType": "passthru"
  },
  {
    "namespace": "http",
    "name": "inbound-channel-adapter",
    "description": "Configures a Message Producing Endpoint for the 'org.springframework.integration.http.inbound.HttpRequestHandlingEndpointSupport' that receives HTTP requests and doesn't produce responses.",
    "connectionType": "source"
  },
  {
    "namespace": "http",
    "name": "outbound-gateway",
    "description": "Configures a Consumer Endpoint for the 'org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler' that sends HTTP requests based on incoming messages and expects HTTP responses.",
    "connectionType": "request_reply"
  },
  {
    "namespace": "integration",
    "name": "filter",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.filter.MessageFilter' that is used to decide whether a Message should be passed along or dropped based on some criteria",
    "connectionType": "tee"
  },
  {
    "namespace": "integration",
    "name": "json-to-object-transformer",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.json.JsonToObjectTransformer' that converts a JSON String to an object.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "service-activator",
    "description": "Defines an endpoint for the 'org.springframework.integration.handler.ServiceActivatingHandler' for exposing any bean reference as a service that receives request Messages from an 'input-channel' and may send reply Messages to an 'output-channel'. The 'ref' may point to an instance that has either a single public method or a method with the @ServiceActivator annotation. Otherwise, the 'method' attribute should be provided along with 'ref'.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "claim-check-in",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.transformer.ClaimCheckInTransformer' that stores a Message and returns a new Message, whose payload is the id of the stored Message.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "management",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "scatter-gather",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.scattergather.ScatterGatherHandler'.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "gateway",
    "description": "Defines a Messaging Gateway - 'org.springframework.integration.gateway.GatewayProxyFactoryBean'.",
    "connectionType": "request_reply"
  },
  {
    "namespace": "integration",
    "name": "idempotent-receiver",
    "description": "Defines an 'org.springframework.integration.handler.advice.IdempotentReceiverInterceptor' bean.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "spel-function",
    "description": "Defines a bean for the 'org.springframework.integration.config.SpelFunctionFactoryBean'.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "aggregator",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.config.AggregatorFactoryBean'.",
    "connectionType": "tee"
  },
  {
    "namespace": "integration",
    "name": "outbound-channel-adapter",
    "description": "Defines an endpoint for the 'org.springframework.integration.handler.ExpressionEvaluatingMessageHandler' or 'org.springframework.integration.handler.MethodInvokingMessageHandler'.",
    "connectionType": "sink"
  },
  {
    "namespace": "integration",
    "name": "splitter",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.splitter.AbstractMessageProcessingSplitter' implementation or 'org.springframework.integration.splitter.DefaultMessageSplitter'.",
    "connectionType": "tee"
  },
  {
    "namespace": "integration",
    "name": "message-history",
    "description": "Will register a Message History writer which will track the message history. There can only be one Message History writer per ApplicationContext hierarchy. See also @EnableMessageHistory annotation.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "payload-type-router",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.router.PayloadTypeRouter'. The 'mapping' sub-elements specify the associations between Java types and target channels.",
    "connectionType": "PROCESSOR"
  },
  {
    "namespace": "integration",
    "name": "header-enricher",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.transformer.HeaderEnricher' for values defined in the MessageHeaders.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "map-to-object-transformer",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.transformer.MapToObjectTransformer' that converts SpEL-based Map to an object.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "payload-deserializing-transformer",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.transformer.PayloadDeserializingTransformer' that converts a byte array to an object.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "header-filter",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.transformer.HeaderFilter' to remove values defined in the MessageHeaders.",
    "connectionType": "tee"
  },
  {
    "namespace": "integration",
    "name": "resource-inbound-channel-adapter",
    "description": "Defines a Polling Channel Adapter for the 'org.springframework.integration.resource.ResourceRetrievingMessageSource' that receives Resource(s) and sends them to a MessageChannel identified via 'channel' attribute.",
    "connectionType": "source"
  },
  {
    "namespace": "integration",
    "name": "selector",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "object-to-map-transformer",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.transformer.ObjectToMapTransformer' that converts any Object payload to a SpEL Map.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "object-to-string-transformer",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.transformer.ObjectToStringTransformer' that converts any Object payload to a String by invoking its toString() method.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "claim-check-out",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.transformer.ClaimCheckOutTransformer' that accepts a Message whose payload is a UUID and retrieves the Message associated with that id from a MessageStore if available (else null).",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "poller",
    "description": "Defines a top-level poller - 'org.springframework.integration.scheduling.PollerMetadata'.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "transformer",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.transformer.MessageTransformingHandler' based on the 'org.springframework.integration.transformer.Transformer' strategy.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "annotation-config",
    "description": "Enables annotation support for Message Endpoints.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "enricher",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.transformer.ContentEnricher' that passes a Message to its request-channel and then expects a reply Message. The reply Message then becomes the root object for evaluation of expressions to enrich the target payload.",
    "connectionType": "request_reply"
  },
  {
    "namespace": "integration",
    "name": "channel-interceptor",
    "description": "Allows you to define channel interceptors ('org.springframework.messaging.support.ChannelInterceptor' implementation) to be applied globally.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "syslog-to-map-transformer",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.transformer.SyslogToMapTransformer' that converts an RFC5424 packet to a Map.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "publish-subscribe-channel",
    "description": "Defines a 'org.springframework.integration.channel.PublishSubscribeChannel' that broadcasts messages to its subscribers.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "bridge",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.handler.BridgeHandler' that passes a Message to the output-channel without modifying it.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "logging-channel-adapter",
    "description": "Defines a Message Producing Endpoint for the 'org.springframework.integration.handler.LoggingHandler'.",
    "connectionType": "sink"
  },
  {
    "namespace": "integration",
    "name": "control-bus",
    "description": "Defines a bean for the 'org.springframework.integration.config.ExpressionControlBusFactoryBean'.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "recipient-list-router",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.router.RecipientListRouter'. A RecipientListRouter will send each received Message to a statically defined list of Message Channels. Another convenient option when configuring a RecipientListRouter is to define the 'selector-expression' for the 'mapping' sub elements. The 'selector-expression' uses Spring Expression Language (SpEL) and can be used as selectors for individual recipient channels. This is similar to using a Filter at the beginning of 'chain' to act as a \"Selective Consumer\". However, in this case, it's all combined rather concisely into the router's configuration.",
    "connectionType": "PROCESSOR"
  },
  {
    "namespace": "integration",
    "name": "stream-transformer",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.transformer.StreamTransformer' that converts an 'InputStream' payload to a byte[] or String. Providing a 'charset' signals that the conversion to String is required.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "inbound-channel-adapter",
    "description": "Defines a Polling Channel Adapter for the 'org.springframework.integration.endpoint.MethodInvokingMessageSource', or 'org.springframework.integration.endpoint.ExpressionEvaluatingMessageSource' or 'org.springframework.integration.scripting.ScriptExecutingMessageSource' that receives from a MessageSource and sends to a MessageChannel. Note, when using the 'expression' attribute, or 'expression' or 'script' sub-element, there is not yet a root Message object and therefore the 'payload' and 'headers' properties are not available in the expression or script.",
    "connectionType": "source"
  },
  {
    "namespace": "integration",
    "name": "payload-serializing-transformer",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.transformer.PayloadSerializingTransformer' that converts an object payload to a byte array.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "resequencer",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.aggregator.ResequencingMessageHandler'.",
    "connectionType": "tee"
  },
  {
    "namespace": "integration",
    "name": "router",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.router.AbstractMessageProcessingRouter' implementation that serves as an adapter for invoking a method on any Spring-managed object as specified by the \"ref\" and \"method\" attributes.",
    "connectionType": "PROCESSOR"
  },
  {
    "namespace": "integration",
    "name": "barrier",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.aggregator.BarrierMessageHandler' that suspends a thread until a corresponding release message is received. The endpoint's message handler is a 'BarrierMessageHandler'.",
    "connectionType": "tee"
  },
  {
    "namespace": "integration",
    "name": "wire-tap",
    "description": "Defines a 'org.springframework.integration.channel.interceptor.WireTap' bean.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "header-value-router",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.router.HeaderValueRouter'. The 'header-name' attribute specifies which header value to lookup. That header value can then provide the name of a channel to be resolved. Alternatively, 1 or more 'mapping' sub-elements may be provided with expected header values mapped to channels.",
    "connectionType": "PROCESSOR"
  },
  {
    "namespace": "integration",
    "name": "delayer",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.handler.DelayHandler' that passes a Message to the output-channel after a delay. The delay may be dynamically determined by evaluating an expression (such as a Message header) or fallback to the 'default-delay' of this endpoint.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "publishing-interceptor",
    "description": "Defines a MessagePublishingInterceptor which allows you to generate messages as a by-product of method invocations on Spring configured components.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "handler-retry-advice",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "channel",
    "description": "Defines a Point-to-Point MessageChannel. See 'PointToPointChannelParser' source code for 'MessageChannel' implementations.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "object-to-json-transformer",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.json.ObjectToJsonTransformer' that converts any Object payload to a JSON String.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "transaction-synchronization-factory",
    "description": "Allows you to configure org.springframework.integration.transaction.DefaultTransactionSynchronizationFactory This implementation of org.springframework.integration.transaction.TransactionSynchronizationFactory allows you to configure SpEL expressions, with their execution being coordinated (synchronized) with a transaction - see {TransactionSynchronization}. Expressions for before-commit, after.-commit, and after-rollback are supported, together with a channel for each where the evaluation result (if any) will be sent. For each sub-element you can specify 'expression' and/or 'channel' attributes. If only the 'channel' attribute is present the received Message will be sent there as part of a particular synchronization scenario. If only the 'expression' attribute is present and the result of an expression is a non-Null value, a Message with the result as the payload will be generated and sent to a default channel (NullChannel) and will appear in the logs. If you want the evaluation result to go to a specific channel add a 'channel' attribute. If the result of an expression is null or void, no Message will be generated.",
    "connectionType": "passthru"
  },
  {
    "namespace": "integration",
    "name": "exception-type-router",
    "description": "Defines a Consumer Endpoint for the 'org.springframework.integration.router.ErrorMessageExceptionTypeRouter' which resolves the target MessageChannel for messages whose payload is an Exception. The channel resolution is based upon the most specific cause of the error for which a channel mapping exists.",
    "connectionType": "content_based_router"
  },
  {
    "namespace": "jms",
    "name": "publish-subscribe-channel",
    "description": "Defines a Message Channel ('org.springframework.integration.jms.config.JmsChannelFactoryBean') that is backed by a JMS Topic.",
    "connectionType": "passthru"
  },
  {
    "namespace": "jms",
    "name": "header-enricher",
    "description": "Defines a 'org.springframework.integration.transformer.HeaderEnricher' for adding statically configured JMS Headers.",
    "connectionType": "passthru"
  },
  {
    "namespace": "jms",
    "name": "outbound-gateway",
    "description": "Configures a Consumer Endpoint for the 'org.springframework.integration.jms.JmsSendingMessageHandler' to send messages to the JMS destination and wait for replies.",
    "connectionType": "request_reply"
  },
  {
    "namespace": "jms",
    "name": "inbound-channel-adapter",
    "description": "Defines a Polling Channel Adapter for the 'org.springframework.integration.jms.JmsDestinationPollingSource' for polling a JMS Destination.",
    "connectionType": "source"
  },
  {
    "namespace": "jms",
    "name": "outbound-channel-adapter",
    "description": "Configures a Consumer Endpoint for the 'org.springframework.integration.jms.JmsSendingMessageHandler' to send messages to the JMS destination without waiting for replies.",
    "connectionType": "sink"
  },
  {
    "namespace": "jms",
    "name": "message-driven-channel-adapter",
    "description": "Defines a Message Producing Endpoint for the 'org.springframework.integration.jms.JmsMessageDrivenEndpoint' (one-way) to listen form message on the JMS destination.",
    "connectionType": "source"
  },
  {
    "namespace": "jms",
    "name": "channel",
    "description": "Defines a Message Channel ('org.springframework.integration.jms.config.JmsChannelFactoryBean') that is backed by a JMS Queue.",
    "connectionType": "passthru"
  },
  {
    "namespace": "jms",
    "name": "inbound-gateway",
    "description": "Defines a Messaging Gateway Endpoint for the 'org.springframework.integration.jms.JmsMessageDrivenEndpoint' to listen for messages in the JMS destination and produce replies.",
    "connectionType": "request_reply"
  },
  {
    "namespace": "kafka",
    "name": "outbound-channel-adapter",
    "description": "Defines the Consumer Endpoint for the KafkaProducerMessageHandler that writes the contents of the Message to kafka broker.",
    "connectionType": "sink"
  },
  {
    "namespace": "kafka",
    "name": "message-driven-channel-adapter",
    "description": "Defines the Message Producing Endpoint for the KafkaMessageDrivenChannelAdapter.",
    "connectionType": "source"
  },
  {
    "namespace": "mqtt",
    "name": "message-driven-channel-adapter",
    "description": "Defines a Message Producing Endpoint for the 'org.springframework.integration.mqtt.inbound.MqttPahoMessageDrivenChannelAdapter' that subscribes to the MQTT topic(s) and produces messages to the channel.",
    "connectionType": "source"
  },
  {
    "namespace": "mqtt",
    "name": "outbound-channel-adapter",
    "description": "Configures a Consumer Endpoint for the 'org.springframework.integration.mqtt.outbound.MqttPahoMessageDrivenChannelAdapter' that sends messages to the MQTT topic.",
    "connectionType": "sink"
  },
  {
    "namespace": "sftp",
    "name": "inbound-channel-adapter",
    "description": "Configures a 'SourcePollingChannelAdapter' Endpoint for the 'org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizingMessageSource' that synchronizes with a remote SFTP endpoint.",
    "connectionType": "source"
  },
  {
    "namespace": "sftp",
    "name": "outbound-gateway",
    "description": "Configures a Consumer Endpoint for the 'org.springframework.integration.sftp.gateway.SftpOutboundGateway used to issue SFTP commands.",
    "connectionType": "request_reply"
  },
  {
    "namespace": "sftp",
    "name": "outbound-channel-adapter",
    "description": "Configures a Consumer Endpoint for the 'org.springframework.integration.file.remote.handler.FileTransferringMessageHandler' for the 'SftpRemoteFileTemplate' that writes files to a remote SFTP endpoint.",
    "connectionType": "sink"
  },
  {
    "namespace": "sftp",
    "name": "inbound-streaming-channel-adapter",
    "description": "Configures a 'SourcePollingChannelAdapter' Endpoint for the 'org.springframework.integration.ftp.inbound.FtpInboundStreamingMessageSource'.",
    "connectionType": "source"
  },
  {
    "namespace": "tcp-udp",
    "name": "udp-inbound-channel-adapter",
    "description": "Defines a Message Producing Endpoint for the 'org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter' for receiving incoming udp packets.",
    "connectionType": "source"
  },
  {
    "namespace": "tcp-udp",
    "name": "tcp-outbound-gateway",
    "description": "Defines a Message Producing Endpoint for the 'org.springframework.integration.ip.tcp.TcpOutboundGateway' for sending TCP packets and waiting for replies.",
    "connectionType": "request_reply"
  },
  {
    "namespace": "tcp-udp",
    "name": "udp-outbound-channel-adapter",
    "description": "Configures a Consumer Endpoint for the 'org.springframework.integration.ip.udp.UnicastSendingMessageHandler' to send UDP packets.",
    "connectionType": "sink"
  },
  {
    "namespace": "tcp-udp",
    "name": "tcp-connection-factory",
    "description": "Defines a 'org.springframework.integration.ip.tcp.connection.ConnectionFactory' implementation bean.",
    "connectionType": "passthru"
  },
  {
    "namespace": "tcp-udp",
    "name": "tcp-inbound-gateway",
    "description": "Defines a Messaging Gateway Endpoint for the 'org.springframework.integration.ip.tcp.TcpInboundGateway' for receiving incoming TCP packets and producing replies for them.",
    "connectionType": "request_reply"
  },
  {
    "namespace": "tcp-udp",
    "name": "tcp-inbound-channel-adapter",
    "description": "Defines a Message Producing Endpoint for the 'org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter' for receiving incoming tcp packets.",
    "connectionType": "source"
  },
  {
    "namespace": "tcp-udp",
    "name": "tcp-outbound-channel-adapter",
    "description": "Defines a Message Producing Endpoint for the 'org.springframework.integration.ip.tcp.TcpSendingMessageHandler' for sending TCP packets.",
    "connectionType": "sink"
  },
  {
    "namespace": "web-services",
    "name": "header-enricher",
    "description": "Defines a 'org.springframework.integration.transformer.HeaderEnricher' for adding a SOAP Action value.",
    "connectionType": "passthru"
  },
  {
    "namespace": "web-services",
    "name": "outbound-gateway",
    "description": "Configures a Consumer Endpoint for the 'org.springframework.integration.ws.AbstractWebServiceOutboundGateway' implementation that sends SOAP requests and expects responses.",
    "connectionType": "request_reply"
  },
  {
    "namespace": "web-services",
    "name": "inbound-gateway",
    "description": "Configures a Messaging Gateway Endpoint for the 'org.springframework.integration.ws.AbstractWebServiceInboundGateway' implementation that receives SOAP requests and produce responses.",
    "connectionType": "request_reply"
  },
  {
    "namespace": "xml",
    "name": "xpath-router",
    "description": "Configures a Consumer Endpoint for the 'org.springframework.integration.xml.router.XPathRouter' which allows for the routing of messages using XPath expressions. This Message Endpoint has no output channel. Instead, one or more output channels are determined dynamically using the provided XPath Expression.",
    "connectionType": "content_based_router"
  },
  {
    "namespace": "xml",
    "name": "xpath-transformer",
    "description": "Defines an XPath ('org.springframework.integration.xml.transformer.XPathTransformer') transformer.",
    "connectionType": "passthru"
  },
  {
    "namespace": "xml",
    "name": "xslt-transformer",
    "description": "Defines an XSLT ('org.springframework.integration.xml.transformer.XsltPayloadTransformer') transformer.",
    "connectionType": "passthru"
  },
  {
    "namespace": "xml",
    "name": "xpath-header-enricher",
    "description": "Defines an 'org.springframework.integration.xml.transformer.XPathHeaderEnricher' that evaluates XPath expressions against the message payload and inserts the result of the evaluation into a message header.",
    "connectionType": "passthru"
  },
  {
    "namespace": "xml",
    "name": "xpath-splitter",
    "description": "Configures a Consumer Endpoint for the 'org.springframework.integration.xml.splitter.XPathMessageSplitter'",
    "connectionType": "tee"
  },
  {
    "namespace": "xml",
    "name": "xpath-expression",
    "description": "Defines an XPath expression - 'org.springframework.xml.xpath.XPathExpressionFactory' with the 'createXPathExpression()' factory-method. Internally XPath expressions will be evaluated as NODESET type and converted to a List<String> representing channel names. Typically such a list will contain a single channel name. However, based on the result of an XPath Expression the XPath router can also take on the characteristics of the Recipient List Router if the XPath Expression returns more than one value, thus resulting in the List<String> containing more than one channel name. In that case the Message will be sent to all channels in the list.",
    "connectionType": "passthru"
  },
  {
    "namespace": "xml",
    "name": "validating-filter",
    "description": "Configures a Consumer Endpoint for the 'org.springframework.integration.filter.MessageFilter' with an 'org.springframework.integration.xml.selector.XmlValidatingMessageSelector'",
    "connectionType": "tee"
  },
  {
    "namespace": "xml",
    "name": "marshalling-transformer",
    "description": "Defines an XML ('org.springframework.integration.xml.transformer.MarshallingTransformer') marshalling transformer.",
    "connectionType": "passthru"
  },
  {
    "namespace": "xml",
    "name": "xpath-filter",
    "description": "Configures a Consumer Endpoint for the 'org.springframework.integration.filter.MessageFilter' with an 'org.springframework.integration.xml.selector.AbstractXPathMessageSelector' implementation based on the configuration options. If the XPath expression will evaluate to a boolean, no configuration attributes are required. If the XPath expression will evaluate to a String, a \"match-value\" should be provided against which the evaluation result will be matched. There are three options for the \"match-type\": exact, case-insensitive, and regex. These correspond to the equals, equals-ignore-case, and matches operations on java.lang.String, respectively. When providing a 'match-type' value of 'regex', the value provided in 'match-value' must be a valid Regular Expression.",
    "connectionType": "tee"
  },
  {
    "namespace": "xml",
    "name": "unmarshalling-transformer",
    "description": "Defines an XML ('org.springframework.integration.xml.transformer.UnmarshallingTransformer') unmarshalling transformer.",
    "connectionType": "passthru"
  }
]